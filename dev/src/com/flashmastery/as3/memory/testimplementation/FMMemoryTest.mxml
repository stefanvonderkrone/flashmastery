<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
		paddingBottom="10" paddingLeft="10" paddingRight="10"
		paddingTop="10" enterFrame="enterframeHandler()"
		initialize="onInit( event )">
	<mx:Panel width="620" height="460" paddingBottom="10" paddingLeft="10"
			paddingRight="10" paddingTop="10" title="FMMemoryTest"
			layout="absolute">
		<mx:Canvas width="580" height="340" x="10" y="10"
			backgroundColor="0" id="_canvas">		
		</mx:Canvas>
		<mx:Button id="_alloc" label="allocInstance" y="360" x="10"
			width="150" click="clickHandler(event)"/>
		<mx:Button id="_clear" label="clearInstances" y="360" x="170"
			width="150" click="clickHandler(event)"/>
		<mx:Label text="System.totalMemory:" y="390" x="10" width="150"/>
		<mx:Label id="_memory" y="390" x="170" textAlign="right" width="150"/>
		<mx:Label id="_memoryMB" y="390" x="330" textAlign="right" width="100"/>
	</mx:Panel>
	
	<mx:Script>
		<![CDATA[
		
			import com.flashmastery.as3.memory.allocator.fp10.FMAllocatorFP10;
			import com.flashmastery.as3.memory.alloc;
			import com.flashmastery.as3.memory.allocator;
			import com.flashmastery.as3.memory.release;
			import flash.system.System;
			
			private var _internalCanvas : Sprite;
			
			private function clickHandler( evt : MouseEvent ) : void {
				switch( evt.currentTarget ) {
					case _alloc:
							allocItem();
						break;
					case _clear:
							clearCanvas();
						break;
					default:
							if ( evt.currentTarget is FMMemoryTestItem ) {
								_internalCanvas.removeChild( FMMemoryTestItem( evt.currentTarget ) );
								FMMemoryTestItem( evt.currentTarget ).removeEventListener(MouseEvent.CLICK, clickHandler );
								release( evt.currentTarget );
							}
						break;
				}
			}
			
			private function allocItem() : void {
				if ( _internalCanvas == null ) {
					_internalCanvas = new Sprite();
					_canvas.rawChildren.addChild( _internalCanvas );
					_internalCanvas.graphics.beginFill( 0 );
					_internalCanvas.graphics.drawRect(0, 0, _canvas.width, _canvas.height);
					_internalCanvas.graphics.endFill();
				}
				var item : FMMemoryTestItem = FMMemoryTestItem( alloc( FMMemoryTestItem ).init() );
				item.x = Math.round( ( Math.random() * 1000000 ) % ( _internalCanvas.width - item.width ) ) + item.width / 2;				item.y = Math.round( ( Math.random() * 1000000 ) % ( _internalCanvas.height - item.height ) ) + item.height / 2;
				_internalCanvas.addChild( item );
				item.addEventListener( MouseEvent.CLICK , clickHandler );
			}
			
			private function clearCanvas() : void {
				var item : FMMemoryTestItem;
				for ( ;_internalCanvas.numChildren > 0; ) {
					item = FMMemoryTestItem( _internalCanvas.removeChildAt( 0 ) );
					item.removeEventListener(MouseEvent.CLICK, clickHandler);
					release( item );
				}
				allocator.clear();
			}
			
			private function enterframeHandler() : void {
				_memory.text = System.totalMemory.toString() + " Bytes";
				_memoryMB.text = "( " + ( Math.round( System.totalMemory / 1024 / 1024 * 100 ) / 100 ).toString() + " MB )";
			}
			
			private function onInit( event : Event ) : void {
				allocator = FMAllocatorFP10.getInstance();
			}
			
		]]>
	</mx:Script>
</mx:Application>